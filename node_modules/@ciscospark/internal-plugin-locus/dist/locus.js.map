{"version":3,"sources":["locus.js"],"names":["USE_INCOMING","USE_CURRENT","EQUAL","FETCH","GREATER_THAN","LESS_THAN","DESYNC","compareToAction","result","Error","Locus","extend","namespace","alert","locus","request","method","uri","url","body","deviceUrl","spark","internal","device","sequence","then","res","create","invitee","options","correlationId","service","resource","localMedias","localSdp","type","sdp","entries","rangeStart","rangeEnd","list","loci","get","sync","syncUrl","join","leave","self","catch","reason","Conflict","reject","decline","sendDtmf","tones","dtmf","v4","updateMedia","audioMuted","videoMuted","mediaId","compare","current","incoming","isEmpty","length","baseSequence","_compareDelta","_compareSequence","ret","getEntriesFirstValue","getEntriesLastValue","getCompareFirstValue","getCompareLastValue","inRange","entry","currentOnlyEntries","incomingOnlyEntries","currentOnly","incomingOnly","i","push","merge","next","forEach","key","participants","toRemove","toUpsert","p","removed","add","set","reduce","acc","has","value","getCallHistory","from","Date","now","toISOString","qs"],"mappings":"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","file":"locus.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SparkPlugin, SparkHttpError} from '@ciscospark/spark-core';\nimport {cloneDeep, difference, first, last, memoize} from 'lodash';\nimport uuid from 'uuid';\n\nexport const USE_INCOMING = `USE_INCOMING`;\nexport const USE_CURRENT = `USE_CURRENT`;\nexport const EQUAL = `EQUAL`;\nexport const FETCH = `FETCH`;\nexport const GREATER_THAN = `GREATER_THAN`;\nexport const LESS_THAN = `LESS_THAN`;\nexport const DESYNC = `DESYNC`;\n\n/**\n * Transates the result of a sequence comparison into an intended behavior\n * @param {string} result\n * @private\n * @returns {string}\n */\nfunction compareToAction(result) {\n  switch (result) {\n    case EQUAL:\n    case GREATER_THAN:\n      return USE_CURRENT;\n    case LESS_THAN:\n      return USE_INCOMING;\n    case DESYNC:\n      return FETCH;\n    default:\n      throw new Error(`${result} is not a recognized sequence comparison result`);\n  }\n}\n\nconst Locus = SparkPlugin.extend({\n  namespace: `Locus`,\n\n  /**\n   * Alert the specified locus that the local user has been notified of the\n   * locus's active state\n   * @param {Types~Locus} locus\n   * @returns {Promise}\n   */\n  alert(locus) {\n    return this.request({\n      method: `PUT`,\n      uri: `${locus.url}/participant/alert`,\n      body: {\n        deviceUrl: this.spark.internal.device.url,\n        sequence: locus.sequence\n      }\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Calls the specified invitee and offers the specified media via\n   * options.localSdp\n   * @param {string} invitee\n   * @param {Object} options\n   * @param {Object} options.localSdp\n   * @returns {Promise<Types~Locus>}\n   */\n  create(invitee, options) {\n    options = options || {};\n    const {correlationId} = options;\n\n    if (!correlationId) {\n      throw new Error(`options.correlationId is required`);\n    }\n\n    return this.request({\n      method: `POST`,\n      service: `locus`,\n      resource: `loci/call`,\n      body: {\n        correlationId,\n        deviceUrl: this.spark.internal.device.url,\n        invitee: {\n          invitee\n        },\n        localMedias: [{\n          localSdp: JSON.stringify({\n            type: `SDP`,\n            sdp: options.localSdp\n          })\n        }],\n        sequence: {\n          entries: [],\n          rangeStart: 0,\n          rangeEnd: 0\n        }\n      }\n    })\n      // res.body.mediaConnections is deprecated so just return the locus\n      .then((res) => res.body.locus);\n  },\n\n  /**\n   * Lists active loci\n   * @returns {Promise<Array<Types~Locus>>}\n   */\n  list() {\n    return this.request({\n      method: `GET`,\n      service: `locus`,\n      resource: `loci`\n    })\n      .then((res) => res.body.loci);\n  },\n\n  /**\n   * Retrieves a single Locus\n   * @param {Types~Locus} locus\n   * @returns {Types~Locus}\n   */\n  get(locus) {\n    return this.request({\n      method: `GET`,\n      uri: `${locus.url}`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Fetches the delta for the locus from its syncUrl. *Does not merge*\n   * @param {Types~Locus} locus\n   * @returns {Types~LocusDelta}\n   */\n  sync(locus) {\n    return this.request({\n      method: `GET`,\n      uri: locus.syncUrl\n    })\n      // the api may return a 204 no content, so we'll give back an empty\n      // object in that case.\n      .then((res) => res.body || {});\n  },\n\n  /**\n   * Join the specified Locus and offer to send it media\n   * @param {Types~Locus} locus\n   * @param {Object} options\n   * @param {Object} options.localSdp\n   * @returns {Types~Locus}\n   */\n  join(locus, options) {\n    options = options || {};\n\n    const correlationId = locus.correlationId || options.correlationId;\n\n    if (!correlationId) {\n      throw new Error(`locus.correlationId or options.correlationId is required`);\n    }\n\n    return this.request({\n      method: `POST`,\n      uri: `${locus.url}/participant`,\n      body: {\n        correlationId,\n        deviceUrl: this.spark.internal.device.url,\n        localMedias: [{\n          localSdp: JSON.stringify({\n            type: `SDP`,\n            sdp: options.localSdp\n          })\n        }],\n        sequence: locus.sequence || {\n          entries: [],\n          rangeStart: 0,\n          rangeEnd: 0\n        }\n      }\n    })\n      // The mediaConnections object is deprecated, so just return the locus\n      .then((res) => res.body.locus);\n  },\n\n  /**\n   * Leave the specified Locus\n   * @param {Types~Locus} locus\n   * @returns {Promise<Types~Locus>}\n   */\n  leave(locus) {\n    return this.request({\n      method: `PUT`,\n      uri: `${locus.self.url}/leave`,\n      body: {\n        deviceUrl: this.spark.internal.device.url,\n        sequence: locus.sequence\n      }\n    })\n      .then((res) => res.body.locus)\n      .catch((reason) => {\n        if (reason instanceof SparkHttpError.Conflict) {\n          return this.get(locus);\n        }\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * Decline to join the specified Locus\n   * @param {Types~Locus} locus\n   * @returns {Promise<Types~Locus>}\n   */\n  decline(locus) {\n    return this.request({\n      method: `PUT`,\n      uri: `${locus.url}/participant/decline`,\n      body: {\n        deviceUrl: this.spark.internal.device.url,\n        sequence: locus.sequence\n      }\n    })\n      .then((res) => res.body)\n      .catch((reason) => {\n        if (reason instanceof SparkHttpError.Conflict) {\n          return this.get(locus);\n        }\n        return Promise.reject(reason);\n      });\n  },\n\n  sendDtmf(locus, tones) {\n    return this.request({\n      method: `POST`,\n      uri: `${locus.self.url}/sendDtmf`,\n      body: {\n        deviceUrl: this.spark.internal.device.url,\n        dtmf: {\n          correlationId: uuid.v4(),\n          tones\n        }\n      }\n    });\n  },\n\n  /**\n   * Send a new sdp to Linus via the Locus API to update media state (e.g. to\n   * start or stop sending audio or video)\n   * @param {Types~Locus} locus\n   * @param {Object} options\n   * @param {string} options.localSdp\n   * @param {string} options.mediaId\n   * @param {Boolean} options.audioMuted\n   * @param {Boolean} options.videoMuted\n   * @returns {Promise<Types~Locus>}\n   */\n  updateMedia(locus, {sdp, audioMuted, videoMuted, mediaId}) {\n    return this.request({\n      method: `PUT`,\n      uri: `${locus.self.url}/media`,\n      body: {\n        deviceUrl: this.spark.internal.device.url,\n        localMedias: [{\n          type: `SDP`,\n          localSdp: JSON.stringify({\n            type: `SDP`,\n            sdp,\n            audioMuted,\n            videoMuted\n          }),\n          mediaId\n        }]\n      },\n      sequence: locus.sequence\n    })\n      .then((res) => res.body.locus);\n  },\n\n  /**\n   * Compares two loci to determine which one contains the most recent state\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @returns {string} one of USE_INCOMING, USE_CURRENT, or FETCH\n   */\n  compare(current, incoming) {\n    /**\n     * Determines if a paricular locus's sequence is empty\n     * @param {Types~Locus} locus\n     * @private\n     * @returns {bool}\n     */\n    function isEmpty(locus) {\n      const sequence = locus.sequence;\n      return (!sequence.entries || !sequence.entries.length) && sequence.rangeStart === 0 && sequence.rangeEnd === 0;\n    }\n\n    if (isEmpty(current) || isEmpty(incoming)) {\n      return USE_INCOMING;\n    }\n\n    if (incoming.baseSequence) {\n      return this._compareDelta(current, incoming);\n    }\n\n    return compareToAction(this._compareSequence(current.sequence, incoming.sequence));\n  },\n\n  /**\n   * Compares two loci sequences (with delta params) and indicates what action\n   * to take.\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @returns {string} one of USE_INCOMING, USE_CURRENT, or FETCH\n   */\n  _compareDelta(current, incoming) {\n    let ret = this._compareSequence(current.sequence, incoming.sequence);\n    if (ret !== LESS_THAN) {\n      return compareToAction(ret);\n    }\n\n    ret = this._compareSequence(current.sequence, incoming.baseSequence);\n\n    switch (ret) {\n      case GREATER_THAN:\n      case EQUAL:\n        return USE_INCOMING;\n      default:\n        return FETCH;\n    }\n  },\n\n  /**\n   * Compares two Locus sequences\n   * @param {LocusSequence} current\n   * @param {LocusSequence} incoming\n   * @returns {string} one of LESS_THAN, GREATER_THAN, EQUAL, or DESYNC\n   */\n  _compareSequence(current, incoming) {\n    if (!current) {\n      throw new Error(`\\`current\\` is required`);\n    }\n\n    if (!incoming) {\n      throw new Error(`\\`incoming\\` is required`);\n    }\n    // complexity here is unavoidable\n    /* eslint complexity: [0] */\n    /* eslint max-statements: [0] */\n\n    // must pick one of arrow-body-style or no-confusing-arrow to disable\n    /* eslint arrow-body-style: [0] */\n\n    // after running the #compare() test suite in a loop, there doesn't seem to\n    // be any appreciable difference when used with or without memoize; since\n    // real locus sequences are likely to contain more sequence numbers than\n    // those in the test suite, I have to assume memoize can only help and the\n    // overhead of memoizing these methods is not a problem.\n\n    const getEntriesFirstValue = memoize((sequence) => {\n      return sequence.entries.length === 0 ? 0 : first(sequence.entries);\n    });\n    const getEntriesLastValue = memoize((sequence) => {\n      return sequence.entries.length === 0 ? 0 : last(sequence.entries);\n    });\n    const getCompareFirstValue = memoize((sequence) => {\n      return sequence.rangeStart || getEntriesFirstValue(sequence);\n    });\n    const getCompareLastValue = memoize((sequence) => {\n      return getEntriesLastValue(sequence) || sequence.rangeEnd;\n    });\n    /**\n     * @param {number} entry\n     * @param {LocusSequence} sequence\n     * @private\n     * @returns {Boolean}\n     */\n    function inRange(entry, sequence) {\n      return entry >= sequence.rangeStart && entry <= sequence.rangeEnd;\n    }\n\n    if (getCompareFirstValue(current) > getCompareLastValue(incoming)) {\n      return GREATER_THAN;\n    }\n\n    if (getCompareLastValue(current) < getCompareFirstValue(incoming)) {\n      return LESS_THAN;\n    }\n\n    const currentOnlyEntries = difference(current.entries, incoming.entries);\n    const incomingOnlyEntries = difference(incoming.entries, current.entries);\n    const currentOnly = [];\n    const incomingOnly = [];\n\n    for (const i of currentOnlyEntries) {\n      if (!inRange(i, incoming)) {\n        currentOnly.push(i);\n      }\n    }\n    for (const i of incomingOnlyEntries) {\n      if (!inRange(i, current)) {\n        incomingOnly.push(i);\n      }\n    }\n\n    if (!currentOnly.length && !incomingOnly.length) {\n      if (current.rangeEnd - getCompareFirstValue(current) > incoming.rangeEnd - getCompareFirstValue(incoming)) {\n        return GREATER_THAN;\n      }\n\n      if (current.rangeEnd - getCompareFirstValue(current) < incoming.rangeEnd - getCompareFirstValue(incoming)) {\n        return LESS_THAN;\n      }\n\n      return EQUAL;\n    }\n\n    if (currentOnly.length && !incomingOnly.length) {\n      return GREATER_THAN;\n    }\n\n    if (!currentOnly.length && incomingOnly.length) {\n      return LESS_THAN;\n    }\n\n    if (!current.rangeStart && !current.rangeEnd && !incoming.rangeStart && !incoming.rangeEnd) {\n      return DESYNC;\n    }\n\n    for (const i of currentOnly) {\n      if (getCompareFirstValue(incoming) < i && i < getCompareLastValue(incoming)) {\n        return DESYNC;\n      }\n    }\n\n    for (const i of incomingOnly) {\n      if (getCompareFirstValue(current) < i && i < getCompareLastValue(current)) {\n        return DESYNC;\n      }\n    }\n\n    if (currentOnly[0] > incomingOnly[0]) {\n      return GREATER_THAN;\n    }\n\n    return LESS_THAN;\n  },\n\n  /**\n   * Merges two locus DTOs (for the same locus)\n   *\n   * @param {Types~Locus} current\n   * @param {Types~Locus|Types~LocusDelta} incoming\n   * @returns {Type~Locus}\n   */\n  merge(current, incoming) {\n    // if incoming is not a delta event, treat it as a new full locus.\n    if (!incoming.baseSequence) {\n      return incoming;\n    }\n\n    const next = cloneDeep(current);\n\n    // 1. All non-null elements in the delta event except the \"baseSequence\" and\n    // the \"participants\" collection should be used to replace their existing\n    // values.\n    Object.keys(incoming).forEach((key) => {\n      if (key === `baseSequence` || key === `participants`) {\n        return;\n      }\n\n      next[key] = incoming[key] || next[key];\n    });\n\n    // 2. The \"baseSequence\" in the delta event can be discarded (it doesn't\n    // need to be maintained in the local working copy).\n\n    if (incoming.participants || incoming.participants.length) {\n      const toRemove = new Set();\n      const toUpsert = new Map();\n\n      incoming.participants.forEach((p) => {\n        if (p.removed) {\n          // Elements of the delta event's \"participants\" list with the\n          // attribute `removed=true` should be removed from the working copy's\n          // \"participants\" collection.\n          toRemove.add(p.url);\n        }\n        else {\n          // Elements of the delta events \"participants\" list that are absent\n          // from the local working copy should be added to that collection.\n          toUpsert.set(p.url, p);\n        }\n      });\n\n      // The \"participants\" collection in the delta event should be merged with\n      // that of the local working copy of the Locus such that elements in the\n      // delta event's \"participants\" replace those with the same url value in\n      // the working copy \"participants\" collection.\n      const participants = next.participants.reduce((acc, p) => {\n        if (!toRemove.has(p.url)) {\n          acc[p.url] = p;\n        }\n        return acc;\n      }, {});\n\n      toUpsert.forEach((value, key) => {\n        participants[key] = value;\n      });\n\n      next.participants = Object.values(participants);\n    }\n\n    return next;\n  },\n\n  getCallHistory(options) {\n    options = options || {};\n    const from = (new Date(options.from || Date.now())).toISOString();\n\n    return this.request({\n      method: `GET`,\n      service: `janus`,\n      resource: `history/userSessions`,\n      qs: {from}\n    })\n      .then((res) => res.body);\n  }\n\n});\n\nexport default Locus;\n"]}