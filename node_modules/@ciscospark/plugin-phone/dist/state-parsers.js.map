{"version":3,"sources":["state-parsers.js"],"names":["activeParticipants","direction","isActive","isCall","joined","joinedOnThisDevice","participantsToCallMemberships","participantToCallMembership","participantStateToCallMembershipState","makeInternalCallId","mediaDirection","participantIsJoined","remoteParticipant","remoteParticipants","remoteAudioMuted","remoteVideoMuted","shouldRing","getState","getStatus","locus","participants","state","self","isCreator","fullState","type","Boolean","spark","internal","device","url","deviceUrl","users","devices","participant","set","memberships","forEach","membership","deviceParticipant","get","audioMuted","videoMuted","push","_self","isInitiator","personUuid","person","id","personId","people","inferPersonIdFromUuid","toLowerCase","lastActive","mediaType","status","filter","audioStatus","includes","videoStatus","event","previousLocus","remote","replaces","replaced","locusUrl","local"],"mappings":"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","file":"state-parsers.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {filter, get} from 'lodash';\n\n/**\n * Finds the Locus's active participants\n * @param {Types~Locus} locus\n * @private\n * @returns {Array<Types~LocusParticipant>}\n */\nexport function activeParticipants(locus) {\n  return filter(locus.participants, {state: `JOINED`});\n}\n\n/**\n * Indicates if the locus was activated form this device\n * @param {Types~Locus} locus\n * @private\n * @returns {string} unknown|in|out\n */\nexport function direction(locus) {\n  if (!locus || !locus.self) {\n    return `unknown`;\n  }\n  return locus.self.isCreator ? `out` : `in`;\n}\n\n/**\n * Indicates of the specified locus is active\n * @param {Types~Locus} locus\n * @private\n * @returns {Boolean}\n */\nexport function isActive(locus) {\n  return locus.fullState.state === `ACTIVE`;\n}\n\n/**\n * Indicates if the specified locus represents a call (in other words, has\n * exactly two participants)\n * @param {Types~Locus} locus\n * @private\n * @returns {Boolean}\n */\nexport function isCall(locus) {\n  return locus && locus.fullState && locus.fullState.type === `CALL`;\n}\n\n/**\n * Indicates if the current user has joined the Locus\n * @param {Types~Locus} locus\n * @private\n * @returns {Boolean}\n */\nexport function joined(locus) {\n  return Boolean(locus.self && participantIsJoined(locus.self));\n}\n\n/**\n * Indicates if this device has joined the locus\n * @param {ProxySpark} spark\n * @param {Types~Locus} locus\n * @private\n * @returns {Boolean}\n */\nexport function joinedOnThisDevice(spark, locus) {\n  return joined(locus) && spark.internal.device.url === locus.self.deviceUrl;\n}\n\n/**\n * Converts a list of participants to a list of memberships\n * @param {SparkCore} spark\n * @param {Types~Locus} locus\n * @private\n * @returns {Array<CallMembership>}\n */\nexport function participantsToCallMemberships(spark, locus) {\n  const users = new Map();\n  const devices = new Map();\n\n  for (const participant of locus.participants) {\n    if (participant.type === `USER`) {\n      users.set(participant.url, participant);\n    }\n    else if (participant.type === `RESOURCE_ROOM`) {\n      devices.set(participant.url, participant);\n    }\n  }\n  const memberships = [];\n  users.forEach((participant) => {\n    const membership = participantToCallMembership(spark, locus, participant);\n    if (participant.devices) {\n      for (const device of participant.devices) {\n        if (device.state === `JOINED` && get(device, `intent.type`) === `OBSERVE`) {\n          const deviceParticipant = devices.get(device.url);\n          membership.audioMuted = remoteAudioMuted(deviceParticipant);\n          membership.videoMuted = remoteVideoMuted(deviceParticipant);\n        }\n      }\n    }\n    memberships.push(membership);\n  });\n\n  return memberships;\n}\n\n/**\n * Converts a single participant to a membership\n * @param {SparkCore} spark\n * @param {Types~Locus} locus\n * @param {Object} participant\n * @private\n * @returns {CallMembership}\n */\nexport function participantToCallMembership(spark, locus, participant) {\n  return {\n    _self: locus.self.url === participant.url,\n    isInitiator: participant.isCreator || false,\n    personUuid: participant.person.id,\n    personId: spark.people.inferPersonIdFromUuid(participant.person.id),\n    state: participantStateToCallMembershipState(participant),\n    audioMuted: remoteAudioMuted(participant),\n    videoMuted: remoteVideoMuted(participant)\n  };\n}\n\n/**\n *\n * Maps participant details to membership state enum\n * @param {LocusParticipant} participant\n * @private\n * @returns {string}\n */\nexport function participantStateToCallMembershipState(participant) {\n  const state = participant.state && participant.state.toLowerCase();\n  switch (state) {\n    case `idle`:\n      // TODO figure out how \"waiting\" is represented\n      return `notified`;\n    case `joined`:\n      return `connected`;\n    case `left`:\n      return `disconnected`;\n    default:\n      return state;\n  }\n}\n\n/**\n * Creates a unique identifier for a call (but not necessarily the \"callId\" that\n * we'll someday expose as a first-class property)\n *\n * @param {Object} locus\n * @private\n * @returns {string}\n */\nexport function makeInternalCallId(locus) {\n  return `${locus.url}_${locus.fullState.lastActive}`;\n}\n\n/**\n * Indicates the direction of the specified media type for the specified\n * participant\n * @param {string} mediaType\n * @param {Types~LocusParticipant} participant\n * @private\n * @returns {string} One of `sendonly`, `recvonly`, `sendrecv`, or `inactive`\n */\nexport function mediaDirection(mediaType, participant) {\n  if (!participant) {\n    return `inactive`;\n  }\n\n  if (!participant.status) {\n    return `inactive`;\n  }\n\n  return (participant.status[`${mediaType}Status`] || `inactive`).toLowerCase();\n}\n\n/**\n * Indicates if the specified participant has joined the Locus\n * @param {Types~LocusParticipant} participant\n * @private\n * @returns {Boolean}\n */\nexport function participantIsJoined(participant) {\n  return participant && participant.state === `JOINED`;\n}\n\n/**\n * Finds the party in the call that is not the current user\n * @param {Types~Locus} locus\n * @private\n * @returns {Types~LocusParticipant}\n */\nexport function remoteParticipant(locus) {\n  return remoteParticipants(locus)[0];\n}\n\n/**\n * Finds all participants of the Locus that are not the current user\n * @param {Types~Locus} locus\n * @private\n * @returns {Types~LocusParticipant}\n */\nexport function remoteParticipants(locus) {\n  return locus.participants.filter((participant) => participant.type === `USER` && participant.url !== locus.self.url);\n}\n\n/**\n * Indicates if the remote party is sending audio\n * @param {Types~LocusParticipant} participant\n * @private\n * @returns {Boolean}\n */\nexport function remoteAudioMuted(participant) {\n  return participantIsJoined(participant) && !participant.status.audioStatus.includes(`SEND`);\n}\n\n/**\n * Indicates if the remote party is sending video\n * @param {Types~LocusParticipant} participant\n * @private\n * @returns {Boolean}\n */\nexport function remoteVideoMuted(participant) {\n  return participantIsJoined(participant) && !participant.status.videoStatus.includes(`SEND`);\n}\n\n/**\n * Indicates if the `call:incoming` event should be fired for the specified Locus\n * @param {Types~MercuryEvent} event Event which delivered the Locus\n * @param {ProxySpark} spark\n * @private\n * @returns {Boolean}\n */\nexport function shouldRing(event) {\n  return get(event, `data.locus.self.alertType.action`) !== `NONE`;\n}\n\n/**\n * Determines the call state from a locus object\n * @param {Types~Locus} locus\n * @returns {string}\n */\nexport function getState(locus) {\n  return locus && locus.fullState && locus.fullState.state.toLowerCase();\n}\n\n// there's really no good way to split getStatus() up that won't make it less readable\n/* eslint-disable complexity */\n/**\n * Determines the call state from a locus object. avoids the caching caused by\n * amp state because that leads to out-of-order updates\n * @param {ProxySpark} spark\n * @param {Types~Locus} locus\n * @param {Types~Locus} previousLocus\n * @private\n * @returns {string}\n */\nexport function getStatus(spark, locus, previousLocus) {\n  if (locus) {\n    const remote = remoteParticipant(locus);\n\n    if (remote) {\n      if (joinedOnThisDevice(spark, locus) && remote && participantIsJoined(remote)) {\n        return `connected`;\n      }\n      if (locus.replaces) {\n        for (const replaced of locus.replaces) {\n          if (replaced.locusUrl === previousLocus.url && replaced.lastActive === get(previousLocus, `fullState.lastActive`)) {\n            return `replaced`;\n          }\n        }\n      }\n\n      const local = locus.self;\n      if (remote.state === `LEFT` || local.state === `LEFT`) {\n        return `disconnected`;\n      }\n\n      if (remote.state === `DECLINED`) {\n        return `disconnected`;\n      }\n\n      if (remote.state === `NOTIFIED`) {\n        return `ringing`;\n      }\n    }\n  }\n  return `initiated`;\n}\n"]}