{"version":3,"sources":["call.js"],"names":["Call","extend","namespace","children","media","collections","memberships","session","activeParticipantsCount","default","required","type","remoteAudioMuted","remoteVideoMuted","correlationId","facingMode","values","internalCallId","setOnce","locus","localMediaStream","locusJoinInFlight","locusLeaveInFlight","me","derived","id","deps","fn","isActive","joinedOnThisDevice","spark","locusUrl","device","self","devices","find","item","url","internal","mediaConnection","mediaId","remoteMember","m","_self","undefined","direction","from","isCall","isInitiator","to","state","config","enableExperimentalGroupCallingSupport","status","previousAttributes","remoteMediaStream","receivingAudio","receivingVideo","sendingAudio","sendingVideo","supportsDtmf","acknowledge","logger","info","alert","then","_setLocus","answer","options","resolve","peer","_join","decline","reject","dial","invitee","locusMethodName","validate","parsed","decode","split","resourceType","Error","services","conversationServiceUrl","mercury","connect","catch","reason","trigger","hangup","end","when","stopListening","off","_hangup","initialize","args","prototype","listenTo","audioMuted","videoMuted","on","model","filter","length","once","listenToAndRun","participants","set","event","_onLocusEvent","error","process","nextTick","createOffer","_updateMedia","sdp","offerSdp","_pollForExpectedLocus","JSON","parse","remoteSdp","acceptAnswer","emit","mode","forEach","key","hangupIfLastActive","call","meeting","previousLocus","sendDtmf","tones","sendFeedback","feedback","metrics","submit","startReceivingAudio","_changeReceivingMedia","startReceivingVideo","startSendingAudio","_changeSendingMedia","startSendingVideo","stopReceivingAudio","stopReceivingVideo","stopSendingAudio","stopSendingVideo","toggleFacingMode","constraints","audio","audioConstraint","video","videoConstraint","ideal","phone","createLocalMediaStream","stream","exact","toggleReceivingAudio","toggleReceivingVideo","toggleSendingAudio","toggleSendingVideo","value","section","includes","_updateSendingMedia","leave","target","defaultFacingMode","recvOnly","offerOptions","offerToReceiveAudio","offerToReceiveVideo","mediaOptions","v4","bandwidthLimit","audioBandwidthLimit","videoBandwidthLimit","localSdp","signalingState","ended","data","eventType","replaces","replaced","lastActive","_validateLocusMediaState","err","warn","sync","incoming","recursing","current","action","compare","merge","get","payload","updateMedia","_waitForExpectedLocus","locusAudio","audioStatus","toLowerCase","mediaAudio","locusVideo","videoStatus","mediaVideo","listener","make","attrs"],"mappings":"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","file":"call.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-env browser: true */\n/* global RTCPeerConnection, RTCSessionDescription */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {\n  base64,\n  oneFlight,\n  retry,\n  tap,\n  whileInFlight\n} from '@ciscospark/common';\nimport {\n  USE_INCOMING,\n  FETCH\n} from '@ciscospark/internal-plugin-locus';\nimport {debounce, defaults, find, get, set} from 'lodash';\nimport {\n  getState,\n  getStatus,\n  isCall,\n  activeParticipants,\n  direction,\n  isActive,\n  joinedOnThisDevice,\n  makeInternalCallId,\n  participantsToCallMemberships\n} from './state-parsers';\nimport boolToStatus from './bool-to-status';\n\nimport CallMemberships from './call-memberships';\nimport WebRTCMedia from './web-rtc-media';\nimport uuid from 'uuid';\n\nimport {parse} from 'sdp-transform';\n\n/**\n * @event ringing\n * @instance\n * @memberof Call\n * @deprecated with {@link config.phone.enableExperimentalGroupCallingSupport} enabled;\n * instead, listen for {@link Call.membership:notified}\n */\n\n/**\n * @event connected\n * @instance\n * @memberof Call\n * @deprecated with {@link config.phone.enableExperimentalGroupCallingSupport} enabled;\n * instead, listen for {@link Call.active}\n */\n\n/**\n * @event disconnected\n * @instance\n * @memberof Call\n * @deprecated with {@link config.phone.enableExperimentalGroupCallingSupport} enabled;\n * instead, listen for {@link Call.inactive}\n */\n\n/**\n * @event active\n * @instance\n * @memberof Call\n * only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event initializing\n * @instance\n * @memberof Call\n * only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event inactive\n * @instance\n * @memberof Call\n * only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event terminating\n * @instance\n * @memberof Call\n * only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event localMediaStream:change\n * @instance\n * @memberof Call\n */\n\n/**\n * @event remoteMediaStream:change\n * @instance\n * @memberof Call\n */\n\n/**\n * @event error\n * @instance\n * @memberof Call\n */\n\n/**\n * @event membership:notified\n * @instance\n * @memberof Call\n * @type {CallMembership}\n * This replaces the {@link Call.ringing} event, but note that it's subtly\n * different. {@link Call.ringing} is emitted when the remote party calls\n * {@link Call#acknowledge()} whereas {@link Call.membership:notified} emits\n * shortly after (but as a direct result of) locally calling\n * {@link Phone#dial()}\n */\n\n/**\n * @event membership:connected\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:declined\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:disconnected\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:waiting\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:change\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event memberships:add\n * @instance\n * @memberof Call\n * Emitted when a new {@link CallMembership} is added to\n * {@link Call#memberships}. Note that {@link CallMembership#state} still needs\n * to be read to determine if the instance represents someone actively\n * participating the call.\n */\n\n/**\n * @event memberships:remove\n * @instance\n * @memberof Call\n * Emitted when a {@link CallMembership} is removed from {@link Call#memberships}.\n */\n\n/**\n * Payload for {@link Call#sendFeedback}\n * @typedef {Object} FeedbackObject\n * @property {number} userRating Number between 1 and 5 (5 being best) to let\n * the user score the call\n * @property {string} userComments Freeform feedback from the user about the\n * call\n * @property {Boolean} includeLogs set to true to submit client logs to the\n * Cisco Spark cloud. Note: at this time, all logs, not just call logs,\n * generated by the sdk will be uploaded to the Spark Cloud. Care has been taken\n * to avoid including PII in these logs, but if you've taken advantage of the\n * SDK's logger, you should make sure to avoid logging PII as well.\n */\n\n/**\n * @class\n */\nconst Call = SparkPlugin.extend({\n  namespace: `Phone`,\n\n  children: {\n    media: WebRTCMedia\n  },\n\n  collections: {\n    /**\n     * @instance\n     * @memberof Call\n     * @type CallMemberships\n     */\n    memberships: CallMemberships\n  },\n\n  session: {\n    activeParticipantsCount: {\n      default: 0,\n      required: true,\n      type: `number`\n    },\n    /**\n     * Indicates if the other party in the call has turned off their microphone.\n     * `undefined` for multiparty calls\n     * @instance\n     * @memberof Call\n     * @readonly\n     * @type {boolean}\n     */\n    remoteAudioMuted: {\n      default: false,\n      required: false,\n      type: `boolean`\n    },\n\n    /**\n     * Indicates if the other party in the call has turned off their camera.\n     * `undefined` for multiparty calls\n     * @instance\n     * @memberof Call\n     * @readonly\n     * @type {boolean}\n     */\n    remoteVideoMuted: {\n      default: false,\n      required: false,\n      type: `boolean`\n    },\n\n    correlationId: `string`,\n    /**\n     * @instance\n     * @memberof Call\n     * @readonly\n     * @type {string}\n     */\n    facingMode: {\n      type: `string`,\n      values: [`user`, `environment`]\n    },\n    /**\n     * Derived from locus.id and locus.fullState.lastActive. Not actually a\n     * \"derived\" property because it shouldn't be reset in event a locus\n     * replacement. Marked as private because this isn't necessarily the callId\n     * that we'll eventually expose as a first-class feature.\n     * @instance\n     * @memberof Call\n     * @private\n     * @readonly\n     * @type {string}\n     */\n    internalCallId: {\n      setOnce: true,\n      type: `string`\n    },\n    locus: `object`,\n    /**\n     * Returns the local MediaStream for the call. May initially be `null`\n     * between the time @{Phone#dial is invoked and the  media stream is\n     * acquired if {@link Phone#dial} is invoked without a `localMediaStream`\n     * option.\n     *\n     * This property can also be set mid-call in which case the streams sent to\n     * the remote party are replaced by this stream. On success, the\n     * {@link Call}'s {@link localMediaStream:change} event fires, notifying any\n     * listeners that we are now sending media from a new source.\n     * @instance\n     * @memberof Call\n     * @type {MediaStream}\n     */\n    localMediaStream: `object`,\n\n    locusJoinInFlight: {\n      default: false,\n      type: `boolean`\n    },\n    locusLeaveInFlight: {\n      default: false,\n      type: `boolean`\n    },\n    /**\n     * Test helper. Shortcut to the current user's membership object. not\n     * official for now, but may get published at some point\n     * @instance\n     * @memberof Call\n     * @private\n     * @type {CallMembership}\n     */\n    me: {\n      type: `object`\n    }\n  },\n\n  // Note, in its current form, any derived property that is an object will emit\n  // a change event everytime a locus gets replaced, even if no values change.\n  // For the moment, this is probably ok; once we have multi-party, regular\n  // change events on activeParticipants may be a problem.\n  derived: {\n    id: {\n      deps: [`locus`],\n      fn() {\n        return get(this, `locus.url`);\n      }\n    },\n    isActive: {\n      deps: [`locus`],\n      fn() {\n        return !!(this.locus && isActive(this.locus));\n      }\n    },\n    joinedOnThisDevice: {\n      deps: [`locus`],\n      default: false,\n      fn() {\n        return !!(this.locus && joinedOnThisDevice(this.spark, this.locus));\n      }\n    },\n    locusUrl: {\n      deps: [`locus`],\n      fn() {\n        return get(this, `locus.url`);\n      }\n    },\n    device: {\n      deps: [`locus`],\n      fn() {\n        return this.locus.self && this.locus.self.devices.find((item) => item.url === this.spark.internal.device.url);\n      }\n    },\n    mediaConnection: {\n      deps: [`locus`],\n      fn() {\n        const device = this.locus.self && this.locus.self.devices.find((item) => item.url === this.spark.internal.device.url);\n        return get(device, `mediaConnections[0]`);\n      }\n    },\n    mediaId: {\n      deps: [`locus`],\n      fn() {\n        const device = this.locus.self && this.locus.self.devices.find((item) => item.url === this.spark.internal.device.url);\n        return get(device, `mediaConnections[0].mediaId`);\n      }\n    },\n    /**\n     * The other participant in a two-party call. `undefined` for multiparty\n     * calls\n     * @instance\n     * @memberof Call\n     * @readyonly\n     * @type {CallMembership}\n     */\n    remoteMember: {\n      deps: [\n        `memberships`,\n        `locus`\n      ],\n      fn() {\n        if (isCall(this.locus)) {\n          return this.memberships.find((m) => !m._self);\n        }\n\n        return undefined;\n      }\n    },\n    direction: {\n      deps: [`locus`],\n      fn() {\n        // This seems brittle, but I can't come up with a better way. The only\n        // way we should have a Call without a locus is if we just initiated a\n        // call but haven't got the response from locus yet.\n        if (!this.locus) {\n          return `out`;\n        }\n        return direction(this.locus);\n      }\n    },\n    from: {\n      deps: [\n        `memberships`\n      ],\n      fn() {\n        if (this.isCall) {\n          return this.memberships.find((m) => m.isInitiator);\n        }\n        return undefined;\n      }\n    },\n    to: {\n      deps: [\n        `memberships`\n      ],\n      fn() {\n        if (this.isCall) {\n          return this.memberships.find((m) => !m.isInitiator);\n        }\n        return undefined;\n      }\n    },\n    /**\n     * <b>active</b> - At least one person (not necessarily this user) is\n     * participating in the call<br/>\n     * <b>inactive</b> - No one is participating in the call<br/>\n     * <b>initializing</b> - reserved for future use<br/>\n     * <b>terminating</b> - reserved for future use<br/>\n     * Only defined if\n     * {@link config.phone.enableExperimentalGroupCallingSupport} has been\n     * enabled\n     * @instance\n     * @memberof Call\n     * @member {string}\n     * @readonly\n     */\n    state: {\n      deps: [\n        `locus`\n      ],\n      fn() {\n        if (this.config.enableExperimentalGroupCallingSupport) {\n          return getState(this.locus);\n        }\n\n        return undefined;\n      }\n    },\n    /**\n     * <b>initiated</b> - Offer was sent to remote party but they have not yet\n     * accepted <br>\n     * <b>ringing</b> - Remote party has acknowledged the call <br>\n     * <b>connected</b> - At least one party is still on the call <br>\n     * <b>disconnected</b> - All parties have dropped <br>\n     * <b>replaced</b> - In (hopefully) rare cases, the underlying data backing\n     * a Call instance may change in such a way that further interaction with\n     * that Call is handled by a different instance. In such cases, the first\n     * Call's status, will transition to `replaced`, which is almost the same\n     * state as `disconnected`. Generally speaking, such a transition should not\n     * happen for a Call instance that is actively sending/receiving media.\n     * @deprecated The {@link Call#status} attribute will likely be replaced by\n     * the {@link Call#state}.\n     * @instance\n     * @memberof Call\n     * @member {string}\n     * @readonly\n     */\n    status: {\n      deps: [\n        `locus`\n      ],\n      fn() {\n        return getStatus(this.spark, this.locus, this.previousAttributes().locus);\n      }\n    },\n    /**\n     * Access to the remote party’s `MediaStream`.\n     * @instance\n     * @memberof Call\n     * @member {MediaStream}\n     * @readonly\n     */\n    remoteMediaStream: {\n      deps: [`media.remoteMediaStream`],\n      fn() {\n        return this.media.remoteMediaStream;\n      }\n    },\n    receivingAudio: {\n      deps: [`media.receivingAudio`],\n      fn() {\n        return this.media.receivingAudio;\n      }\n    },\n    receivingVideo: {\n      deps: [`media.receivingVideo`],\n      fn() {\n        return this.media.receivingVideo;\n      }\n    },\n    sendingAudio: {\n      deps: [`media.sendingAudio`],\n      fn() {\n        return this.media.sendingAudio;\n      }\n    },\n    sendingVideo: {\n      deps: [`media.sendingVideo`],\n      fn() {\n        return this.media.sendingVideo;\n      }\n    },\n    isCall: {\n      deps: [`locus`],\n      fn() {\n        return isCall(this.locus);\n      }\n    },\n    supportsDtmf: {\n      deps: [`locus`],\n      fn() {\n        return get(this, `locus.self.enableDTMF`);\n      }\n    }\n  },\n\n  @oneFlight\n  /**\n   * Use to acknowledge (without answering) an incoming call. Will cause the\n   * initiator's Call instance to emit the ringing event.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  acknowledge() {\n    this.logger.info(`call: acknowledging`);\n    return this.spark.internal.locus.alert(this.locus)\n      .then((locus) => this._setLocus(locus))\n      .then(tap(() => this.logger.info(`call: acknowledged`)));\n  },\n\n  @oneFlight\n  @whileInFlight(`locusJoinInFlight`)\n  // Note: the `whileInFlight` decorator screws up name inferrence, so we need\n  // to include @name below.\n  /**\n   * Answers an incoming call.\n   * @instance\n   * @name answer\n   * @memberof Call\n   * @param {Object} options\n   * @param {MediaStreamConstraints} options.constraints\n   * @returns {Promise}\n   */\n  answer(options) {\n    this.logger.info(`call: answering`);\n    if (!this.locus) {\n      this.logger.info(`call: no locus provided, answer() is a noop`);\n      return Promise.resolve();\n    }\n    // Locus may think we're joined on this device if we e.g. reload the page,\n    // so, we need to check if we also have a working peer connection\n    if (this.joinedOnThisDevice && this.media.peer) {\n      this.logger.info(`call: already joined on this device`);\n      return Promise.resolve();\n    }\n    return this._join(`join`, this.locus, options)\n      .then(tap(() => this.logger.info(`call: answered`)));\n  },\n\n  /**\n   * Alias of {@link Call#reject}\n   * @see {@link Call#reject}\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  decline() {\n    return this.reject();\n  },\n\n  @oneFlight\n  /**\n   * Used by {@link Phone#dial} to initiate an outbound call\n   * @instance\n   * @memberof Call\n   * @param {[type]} invitee\n   * @param {[type]} options\n   * @private\n   * @returns {[type]}\n   */\n  dial(invitee, options) {\n    this.locusJoinInFlight = true;\n    this.logger.info(`call: dialing`);\n\n    let locusMethodName = `create`;\n\n    if (base64.validate(invitee)) {\n      // eslint-disable-next-line no-unused-vars\n      const parsed = base64.decode(invitee).split(`/`);\n      const resourceType = parsed[3];\n      const id = parsed[4];\n      if (resourceType === `PEOPLE`) {\n        invitee = id;\n      }\n\n      if (resourceType === `ROOM`) {\n        if (!get(this, `config.enableExperimentalGroupCallingSupport`)) {\n          throw new Error(`Group calling is not enabled. Please enable config.phone.enableExperimentalGroupCallingSupport`);\n        }\n\n        locusMethodName = `join`;\n        invitee = {\n          url: `${this.spark.internal.device.services.conversationServiceUrl}/conversations/${id}/locus`\n        };\n      }\n    }\n\n    // Note: mercury.connect() will call device.register() if needed. We're not\n    // using phone.register() here because it guarantees a device refresh, which\n    // is probably unnecessary.\n    this.spark.internal.mercury.connect()\n      .then(() => this._join(locusMethodName, invitee, options))\n      .then(tap(() => this.logger.info(`call: dialed`)))\n      .catch((reason) => {\n        this.trigger(`error`, reason);\n      })\n      .then(() => {\n        this.locusJoinInFlight = false;\n      });\n\n    return this;\n  },\n\n  /**\n   * Disconnects the active call. Applies to both incoming and outgoing calls.\n   * This method may be invoked in any call state and the SDK should take care\n   * to tear down the call and free up all resources regardless of the state.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  hangup() {\n    // Note: not a @oneFlight because this function must call itself\n    if (this.direction === `in` && !this.joinedOnThisDevice) {\n      return this.reject();\n    }\n\n    this.logger.info(`call: hanging up`);\n\n    this.media.end();\n\n    if (this.locusJoinInFlight) {\n      this.logger.info(`call: locus join in flight, waiting for rest call to complete before hanging up`);\n      return this.when(`change:locusJoinInFlight`)\n        .then(() => this.hangup());\n    }\n\n    if (!this.locus) {\n      this.stopListening(this.spark.internal.mercury);\n      this.off();\n      this.logger.info(`call: hang up complete, call never created`);\n      return Promise.resolve();\n    }\n\n    return this._hangup();\n  },\n\n  /**\n   * Initializer\n   * @instance\n   * @memberof Call\n   * @private\n   * @param {Object} attrs\n   * @param {Object} options\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n\n    this.listenTo(this.memberships, `change:audioMuted`, () => {\n      if (this.remoteMember) {\n        this.remoteAudioMuted = this.remoteMember.audioMuted;\n      }\n    });\n\n    this.listenTo(this.memberships, `change:videoMuted`, () => {\n      if (this.remoteMember) {\n        this.remoteVideoMuted = this.remoteMember.videoMuted;\n      }\n    });\n\n    this.on(`change:remoteMember`, () => {\n      if (this.remoteMember) {\n        this.remoteAudioMuted = this.remoteMember.audioMuted;\n        this.remoteVideoMuted = this.remoteMember.videoMuted;\n      }\n      else {\n        this.remoteAudioMuted = undefined;\n        this.remoteVideoMuted = undefined;\n      }\n    });\n\n    this.listenTo(this.memberships, `add`, (model) => this.trigger(`memberships:add`, model));\n    this.listenTo(this.memberships, `remove`, (model) => this.trigger(`memberships:remove`, model));\n    this.listenTo(this.memberships, `change`, (model) => this.trigger(`membership:change`, model));\n    this.listenTo(this.memberships, `change:state`, (model) => {\n      this.activeParticipantsCount = this\n      .memberships\n      .filter((m) => m.state === `connected`)\n      .length;\n\n      this.trigger(`membership:${model.state}`, model);\n    });\n\n    if (this.locus) {\n      this.internalCallId = makeInternalCallId(this.locus);\n    }\n    else {\n      this.once(`change:locus`, () => {\n        this.internalCallId = makeInternalCallId(this.locus);\n      });\n    }\n\n    this.memberships.listenToAndRun(this, `change:locus`, () => {\n      if (this.locus && this.locus.participants) {\n\n        // Reminder: we're parsing here instead of CallMembership(s) so that we\n        // can avoid making those classes spark aware and therefore keep them a\n        // lot simpler\n        this.memberships.set(participantsToCallMemberships(this.spark, this.locus));\n        this.me = this.memberships.find((m) => m._self);\n      }\n    });\n\n    this.listenTo(this.spark.internal.mercury, `event:locus`, (event) => this._onLocusEvent(event));\n    this.listenTo(this.spark.internal.mercury, `event:locus.difference`, (event) => this._onLocusEvent(event));\n\n    this.listenTo(this.media, `error`, (error) => this.trigger(`error`, error));\n    if (this.config.enableExperimentalGroupCallingSupport) {\n      this.on(`inactive`, () => {\n        process.nextTick(() => {\n          this.stopListening();\n          this.off();\n        });\n      });\n    }\n    else {\n      this.on(`disconnected`, () => {\n        // need to do this on next tick otherwise this.off() prevents remaining\n        // events from being received (e.g. other listeners for `disconnected`\n        // won't execute)\n        process.nextTick(() => {\n          this.stopListening(this.spark.internal.mercury);\n          this.off();\n        });\n      });\n    }\n    this.on(`replaced`, () => {\n      // need to do this on next tick otherwise this.off() prevents remaining\n      // events from being received (e.g. other listeners for `disconnected`\n      // won't execute)\n      process.nextTick(() => {\n        this.stopListening(this.spark.internal.mercury);\n        this.off();\n      });\n    });\n\n    this.listenTo(this.media, `negotiationneeded`, debounce(() => {\n      this.media.createOffer()\n        .then(() => this._updateMedia({\n          sdp: this.media.offerSdp,\n          mediaId: this.mediaId\n        }))\n        .then(() => this._pollForExpectedLocus())\n        .then(() => {\n          const sdp = JSON.parse(this.mediaConnection.remoteSdp).sdp;\n          return this.media.acceptAnswer(sdp);\n        })\n        .catch((reason) => this.emit(`error`, reason));\n    }));\n\n    // Reminder: this is not a derived property so that we can reassign the\n    // stream midcall\n    this.on(`change:media.localMediaStream`, () => {\n      this.localMediaStream = this.media.localMediaStream;\n    });\n\n    this.on(`change:localMediaStream`, () => {\n      if (this.media.localMediaStream !== this.localMediaStream) {\n        this.media.localMediaStream = this.localMediaStream;\n      }\n\n      if (this.facingMode) {\n        const mode = get(this, `media.videoConstraint.facingMode.ideal`, get(this, `media.videoConstraint.facingMode.ideal`));\n\n        if (mode === `user`) {\n          this.facingMode = `user`;\n        }\n\n        if (mode === `environment`) {\n          this.facingMode = `environment`;\n        }\n      }\n    });\n\n    [\n      `remoteMediaStream`,\n      `localMediaStream`,\n      `remoteAudioMuted`,\n      `remoteVideoMuted`\n    ].forEach((key) => {\n      this.on(`change:${key}`, () => this.trigger(`${key}:change`));\n    });\n\n    // This handler is untested because there's no way to provoke it. It's\n    // probably actually only relevant for group calls.\n    this.on(`change:isActive`, () => {\n      if (!this.isActive) {\n        if (this.joinedOnThisDevice) {\n          this.logger.info(`call: hanging up due to locus going inactive`);\n          this.hangup();\n        }\n      }\n    });\n\n    this.on(`change:activeParticipantsCount`, () => {\n      if (!this.joinedOnThisDevice) {\n        return;\n      }\n\n      if (this.activeParticipantsCount !== 1) {\n        return;\n      }\n\n      if (this.isCall && !this.config.hangupIfLastActive.call) {\n        return;\n      }\n\n      if (!this.isCall && !this.config.hangupIfLastActive.meeting) {\n        return;\n      }\n\n      const previousLocus = this.previousAttributes().locus;\n      if (!previousLocus) {\n        return;\n      }\n\n      if (activeParticipants(previousLocus).length > 1) {\n        this.logger.info(`call: hanging up due to last participant in call`);\n        this.hangup();\n      }\n    });\n\n    this.on(`change:status`, () => {\n      process.nextTick(() => this.trigger(this.status));\n    });\n\n    this.on(`change:state`, () => {\n      if (this.config.enableExperimentalGroupCallingSupport) {\n        process.nextTick(() => this.trigger(this.state));\n      }\n    });\n  },\n\n  @oneFlight\n  /**\n   * Rejects an incoming call. Only applies to incoming calls. Invoking this\n   * method on an outgoing call is a no-op.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  reject() {\n    if (this.direction === `out`) {\n      return Promise.resolve();\n    }\n\n    this.logger.info(`call: rejecting`);\n    /* eslint no-invalid-this: [0] */\n    return this.spark.internal.locus.decline(this.locus)\n      .then((locus) => this._setLocus(locus))\n      .then(tap(() => this.stopListening(this.spark.internal.mercury)))\n      .then(tap(() => this.off()))\n      .then(tap(() => this.logger.info(`call: rejected`)));\n  },\n\n  /**\n   * Send DTMF tones to the current call\n   * @param {string} tones\n   * @returns {Promise}\n   */\n  sendDtmf(tones) {\n    if (!this.supportsDtmf) {\n      return Promise.reject(new Error(`this call does not support dtmf`));\n    }\n\n    return this.spark.internal.locus.sendDtmf(this.locus, tones);\n  },\n\n  /**\n   * Sends feedback about the call to the Cisco Spark cloud\n   * @instance\n   * @memberof Call\n   * @param {FeedbackObject} feedback\n   * @returns {Promise}\n   */\n  sendFeedback(feedback) {\n    return this.spark.internal.metrics.submit(`meetup_call_user_rating`, feedback);\n  },\n\n  startReceivingAudio() {\n    return this._changeReceivingMedia(`offerToReceiveAudio`, true);\n  },\n\n  startReceivingVideo() {\n    return this._changeReceivingMedia(`offerToReceiveVideo`, true);\n  },\n\n  /**\n   * Starts sending audio to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startSendingAudio() {\n    return this._changeSendingMedia(`audio`, true);\n  },\n\n  /**\n   * Starts sending video to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startSendingVideo() {\n    return this._changeSendingMedia(`video`, true);\n  },\n\n  stopReceivingAudio() {\n    return this._changeReceivingMedia(`offerToReceiveAudio`, false);\n  },\n\n  stopReceivingVideo() {\n    return this._changeReceivingMedia(`offerToReceiveVideo`, false);\n  },\n\n  /**\n   * Stops sending audio to the Cisco Spark Cloud. (stops broadcast immediately,\n   * even if renegotiation has not completed)\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopSendingAudio() {\n    return this._changeSendingMedia(`audio`, false);\n  },\n\n  /**\n   * Stops sending video to the Cisco Spark Cloud. (stops broadcast immediately,\n   * even if renegotiation has not completed)\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopSendingVideo() {\n    return this._changeSendingMedia(`video`, false);\n  },\n\n  /**\n   * Replaces the current mediaStrem with one with identical constraints, except\n   * for an opposite facing mode. If the current facing mode cannot be\n   * determined, the facing mode will be set to `user`. If the call is audio\n   * only, this function will throw.\n   * @instance\n   * @memberof Call\n   * @returns {undefined}\n   */\n  toggleFacingMode() {\n    const constraints = {\n      audio: Object.assign({}, this.media.audioConstraint),\n      video: this.media.videoConstraint\n    };\n\n    if (!constraints.video) {\n      throw new Error(`Cannot toggle facignMode on audio-only call`);\n    }\n\n    if (this.facingMode !== `user` && this.facingMode !== `environment`) {\n      throw new Error(`Cannot determine current facing mode; specify a new localMediaStream to change cameras`);\n    }\n\n    if (constraints.video === true) {\n      constraints.video = {\n        facingMode: {\n          ideal: this.facingMode\n        }\n      };\n    }\n\n    if (this.facingMode === `user`) {\n      set(constraints, `video.facingMode.ideal`, `environment`);\n    }\n    else {\n      set(constraints, `video.facingMode.ideal`, `user`);\n    }\n\n    return this.spark.phone.createLocalMediaStream(constraints)\n      .then((stream) => new Promise((resolve) => {\n        this.media.once(`answeraccepted`, resolve);\n        this.localMediaStream = stream;\n      }))\n      .then(() => {\n        this.facingMode = constraints.video.facingMode.ideal || constraints.video.facingMode.exact;\n      });\n  },\n\n  /**\n   * Toggles receiving audio from the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleReceivingAudio() {\n    return this.receivingAudio ? this.stopReceivingAudio() : this.startReceivingAudio();\n  },\n\n  /**\n   * Toggles receiving video from the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleReceivingVideo() {\n    return this.receivingVideo ? this.stopReceivingVideo() : this.startReceivingVideo();\n  },\n\n  /**\n   * Toggles sending audio to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleSendingAudio() {\n    return this.sendingAudio ? this.stopSendingAudio() : this.startSendingAudio();\n  },\n\n  /**\n   * Toggles sending video to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleSendingVideo() {\n    return this.sendingVideo ? this.stopSendingVideo() : this.startSendingVideo();\n  },\n\n  _changeReceivingMedia(key, value) {\n    return new Promise((resolve) => {\n      this.once(`change:receiving${key === `offerToReceiveAudio` ? `Audio` : `Video`}`, () => resolve());\n      this.media.set(key, value);\n    });\n  },\n\n  _changeSendingMedia(key, value) {\n    return new Promise((resolve) => {\n      const sdp = parse(this.media.offerSdp);\n      const section = find(sdp.media, {type: key});\n      // If the current offer is going to trigger a renegotiation, then we don't\n      // need to renegotiate here.\n      if (!section || !section.direction.includes(`send`)) {\n        this.media.once(`answeraccepted`, resolve);\n      }\n      else {\n        this.once(`change:sending${key === `audio` ? `Audio` : `Video`}`, () => resolve(this._updateSendingMedia()));\n      }\n      this.media.set(key, value);\n    });\n  },\n\n  @oneFlight\n  @whileInFlight(`locusLeaveInFlight`)\n  /**\n   * Does the internal work necessary to end a call while allowing hangup() to\n   * call itself without getting stuck in promise change because of oneFlight\n   * @private\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  _hangup() {\n    return this.spark.internal.locus.leave(this.locus)\n      .then((locus) => this._setLocus(locus))\n      // Note: not stopping event-listening here; that'll happening\n      // automatically when `disconnected` fires.\n      .then(tap(() => this.logger.info(`call: hung up`)));\n  },\n\n  @oneFlight\n  // The complexity in _join is largely driven up by fairly readable `||`s\n  // eslint-disable-next-line complexity\n  _join(locusMethodName, target, options = {}) {\n\n    if (options.localMediaStream) {\n      this.media.set(`localMediaStream`, options.localMediaStream);\n    }\n    else {\n      if (!options.constraints) {\n        options.constraints = {\n          audio: true,\n          video: {\n            facingMode: {\n              ideal: this.spark.phone.defaultFacingMode\n            }\n          }\n        };\n      }\n      const mode = get(options, `constraints.video.facingMode.ideal`, get(options, `constraints.video.facingMode.exact`));\n      if (mode === `user` || mode === `environment`) {\n        this.facingMode = mode;\n      }\n\n      const recvOnly = !options.constraints.audio && !options.constraints.video;\n      options.offerOptions = defaults(options.offerOptions, {\n        offerToReceiveAudio: recvOnly || !!options.constraints.audio,\n        offerToReceiveVideo: recvOnly || !!options.constraints.video\n      });\n    }\n\n    const mediaOptions = {};\n    if (options.constraints) {\n      mediaOptions.audio = options.constraints.audio;\n      mediaOptions.video = options.constraints.video;\n    }\n\n    if (options.offerOptions) {\n      mediaOptions.offerToReceiveAudio = options.offerOptions.offerToReceiveAudio;\n      mediaOptions.offerToReceiveVideo = options.offerOptions.offerToReceiveVideo;\n    }\n\n    if (mediaOptions.offerOptions || options.constraints) {\n      this.media.set(mediaOptions);\n    }\n\n    if (!target.correlationId) {\n      this.correlationId = options.correlationId = uuid.v4();\n    }\n\n    if (!this.correlationId) {\n      this.correlationId = target.correlationId;\n    }\n\n    // reminder: not doing this copy in initialize() because config may not yet\n    // be available\n    this.media.bandwidthLimit = {\n      audioBandwidthLimit: this.config.audioBandwidthLimit,\n      videoBandwidthLimit: this.config.videoBandwidthLimit\n    };\n\n    return this.media.createOffer()\n      .then(() => this.spark.internal.locus[locusMethodName](target, {\n        localSdp: this.media.offerSdp,\n        correlationId: this.correlationId\n      }))\n      .then((locus) => this._setLocus(locus))\n      .then(() => {\n        const answer = JSON.parse(this.mediaConnection.remoteSdp).sdp;\n        this.logger.info(`accepting offer`);\n        this.logger.info(`peer state`, this.media.peer && this.media.peer.signalingState);\n        if (!this.media.ended) {\n          return this.media.acceptAnswer(answer)\n            .then(() => this.logger.info(`offer accepted`));\n        }\n        this.logger.info(`call: already ended, not accepting answer`);\n        return Promise.resolve();\n      });\n  },\n\n  /**\n   * Handles an incoming mercury event if relevant to this call.\n   * @instance\n   * @memberof Call\n   * @param {Types~MercuryEvent} event\n   * @private\n   * @returns {undefined}\n   */\n  _onLocusEvent(event) {\n    const devices = get(event, `data.locus.self.devices`);\n    const device = devices && find(devices, (item) => item.url === this.spark.internal.device.url);\n    if (this.locus && makeInternalCallId(event.data.locus) === this.internalCallId || device && this.correlationId && this.correlationId === device.correlationId) {\n      this.logger.info(`locus event: ${event.data.eventType}`);\n      this._setLocus(event.data.locus);\n    }\n\n    if (event.data.locus.replaces) {\n      for (const replaced of event.data.locus.replaces) {\n        if (`${replaced.locusUrl}_${replaced.lastActive}` === this.internalCallId) {\n          this._setLocus(event.data.locus);\n          this.logger.info(`locus replacement event: ${event.data.eventType}`, this.locusUrl, `->`, event.data.locus.url);\n          return;\n        }\n      }\n    }\n  },\n\n  @retry\n  /**\n   * The response to a PUT to LOCUS/media may not be fully up-to-date when we\n   * receive it. This method polls locus until we get a locus with the status\n   * properties we expect (or three errors occur)\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise<Types~Locus>}\n   */\n  _pollForExpectedLocus() {\n    return new Promise((resolve) => {\n      try {\n        this._validateLocusMediaState(this.locus);\n        resolve();\n      }\n      catch (err) {\n        this.logger.warn(`locus: received locus does not contain expected state; fetching again`);\n        resolve(this.spark.internal.locus.sync(this.locus)\n          .then((locus) => this._setLocus(locus))\n          .then(() => this._validateLocusMediaState(this.locus)));\n      }\n    });\n  },\n\n  /**\n   * Assigns a new locus to this.locus according to locus sequencing rules\n   * @instance\n   * @memberof Call\n   * @param {Types~Locus} incoming\n   * @param {boolean} recursing - when true, indicates that this method has\n   * called itself and we should fall back to {@link locus.get()} instead of\n   * calling {@link locus.sync()}\n   * @private\n   * @returns {Promise}\n   */\n  _setLocus(incoming, recursing = false) {\n    const current = this.locus;\n    if (!current) {\n      this.locus = incoming;\n      return Promise.resolve();\n    }\n    const action = this.spark.internal.locus.compare(current, incoming);\n\n    switch (action) {\n      case USE_INCOMING:\n        this.locus = this.spark.internal.locus.merge(this.locus, incoming);\n        if (this.device) {\n          this.correlationId = this.device.correlationId;\n        }\n        break;\n      case FETCH:\n        if (recursing) {\n          this.logger.info(`call: fetching locus according to sequencing algorithm`);\n          return this.spark.internal.locus.get(current)\n            .then((locus) => this._setLocus(locus, true));\n        }\n\n        this.logger.info(`call: syncing locus according to sequencing algorithm`);\n\n        return this.spark.internal.locus.sync(current)\n          .then((locus) => this._setLocus(locus, true));\n\n      default:\n      // do nothing\n    }\n\n    return Promise.resolve();\n  },\n\n  /**\n   * Changes the status of media\n   * @instance\n   * @memberof Call\n   * @param {Object} payload\n   * @private\n   * @returns {Promise}\n   */\n  _updateMedia(payload) {\n    if (payload.sdp && !payload.sdp.includes(`b=`)) {\n      throw new Error(`outbound sdp should always have a 'b=' line`);\n    }\n    return this.spark.internal.locus.updateMedia(this.locus, payload)\n      .then((locus) => this._setLocus(locus));\n  },\n\n  @oneFlight\n  /**\n   * Changes the status of outbound media\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise}\n   */\n  _updateSendingMedia() {\n    return this._updateMedia({\n      sdp: this.media.offerSdp,\n      mediaId: this.mediaId,\n      audioMuted: !this.sendingAudio,\n      videoMuted: !this.sendingVideo\n    })\n      .then(() => this._waitForExpectedLocus());\n  },\n\n  /**\n   * Checks that this.locus has the expected state\n   * @instance\n   * @memberof Call\n   * @param {Types~Locus} locus\n   * @private\n   * @returns {Promise}\n   */\n  _validateLocusMediaState(locus) {\n    const locusAudio = locus.self.status.audioStatus.toLowerCase();\n    const mediaAudio = boolToStatus(this.media.audio, this.media.offerToReceiveAudio);\n    if (locusAudio !== mediaAudio) {\n      this.logger.warn(`locus: expected audio ${locusAudio} (locus) to equal ${mediaAudio} (local media)`);\n      throw new Error(`locus.self.status.audioStatus indicates the received DTO is out of date`);\n    }\n\n    const locusVideo = locus.self.status.videoStatus.toLowerCase();\n    const mediaVideo = boolToStatus(this.media.video, this.media.offerToReceiveVideo);\n    if (locusVideo !== mediaVideo) {\n      this.logger.warn(`locus: expected video ${locusVideo} (locus) to equal ${mediaVideo} (local media)`);\n      throw new Error(`locus.self.status.videoStatus indicates the received DTO is out of date`);\n    }\n\n    return locus;\n  },\n\n  /**\n   * Waits until this.locus describes the expected state\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise}\n   */\n  _waitForExpectedLocus() {\n    return new Promise((resolve) => {\n      const listener = () => {\n        try {\n          this._validateLocusMediaState(this.locus);\n          this.off(`change:locus`, listener);\n          resolve();\n        }\n        catch (err) {\n          this.logger.warn(`locus: current locus not in expected state; waiting for next locus`);\n        }\n      };\n      this.on(`change:locus`, listener);\n      listener();\n    });\n  }\n});\n\nCall.make = function make(attrs, options) {\n  return new Call(attrs, options);\n};\n\nexport default Call;\n"]}