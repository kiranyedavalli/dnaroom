{"version":3,"sources":["calls.js"],"names":["Calls","extend","model","mainIndex","indexes","initialize","args","prototype","on","call","listenTo","config","enableExperimentalGroupCallingSupport","state","remove","status","has","locus","found","get","url","fullState","lastActive","replaces","replaced","locusUrl"],"mappings":";;;;;;;;;;;;;;AAIA;;;;AACA;;;;;;AALA;;;;AAOA,IAAMA,QAAQ,8BAAcC,MAAd,CAAqB;AACjCC,uBADiC;;AAGjCC,6BAHiC;;AAKjCC,WAAS,iBALwB;;AASjCC,YATiC,wBASb;AAAA;;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AAClB,yBAAc,8BAAcC,SAAd,CAAwBF,UAAtC,EAAkD,IAAlD,EAAwDC,IAAxD;;AAEA,SAAKE,EAAL,QAAe,UAACC,IAAD,EAAU;AACvB,YAAKC,QAAL,CAAcD,IAAd,kBAAoC,YAAM;AACxC,YAAIA,KAAKE,MAAL,CAAYC,qCAAhB,EAAuD;AACrD,cAAIH,KAAKI,KAAL,eAAJ,EAA+B;AAC7B,kBAAKC,MAAL,CAAYL,IAAZ;AACD;AACF,SAJD,MAKK,IAAIA,KAAKM,MAAL,mBAAJ,EAAoC;AACvC,gBAAKD,MAAL,CAAYL,IAAZ;AACD;AACF,OATD;AAUD,KAXD;AAYD,GAxBgC;AA0BjCO,KA1BiC,eA0B7BC,KA1B6B,EA0BtB;AACT,QAAMC,QAAQ,KAAKC,GAAL,CAAYF,MAAMG,GAAlB,SAAyBH,MAAMI,SAAN,CAAgBC,UAAzC,CAAd;AACA,QAAIJ,KAAJ,EAAW;AACT,aAAO,IAAP;AACD;;AAED,QAAID,MAAMM,QAAV,EAAoB;AAAA;AAAA;AAAA;;AAAA;AAClB,wDAAuBN,MAAMM,QAA7B,4GAAuC;AAAA,cAA5BC,QAA4B;;AACrC,cAAI,KAAKL,GAAL,CAAYK,SAASC,QAArB,SAAiCD,SAASF,UAA1C,CAAJ,EAA6D;AAC3D,mBAAO,IAAP;AACD;AACF;AALiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMnB;AACD,WAAO,KAAP;AACD;AAxCgC,CAArB,CAAd;;kBA2CetB,K","file":"calls.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport AmpCollection from 'ampersand-collection';\nimport Call from './call';\n\nconst Calls = AmpCollection.extend({\n  model: Call,\n\n  mainIndex: `internalCallId`,\n\n  indexes: [\n    `correlationId`\n  ],\n\n  initialize(...args) {\n    Reflect.apply(AmpCollection.prototype.initialize, this, args);\n\n    this.on(`add`, (call) => {\n      this.listenTo(call, `change:state`, () => {\n        if (call.config.enableExperimentalGroupCallingSupport) {\n          if (call.state === `inactive`) {\n            this.remove(call);\n          }\n        }\n        else if (call.status === `disconnected`) {\n          this.remove(call);\n        }\n      });\n    });\n  },\n\n  has(locus) {\n    const found = this.get(`${locus.url}_${locus.fullState.lastActive}`);\n    if (found) {\n      return true;\n    }\n\n    if (locus.replaces) {\n      for (const replaced of locus.replaces) {\n        if (this.get(`${replaced.locusUrl}_${replaced.lastActive}`)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n});\n\nexport default Calls;\n"]}